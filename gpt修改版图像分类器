
描述
cooler-boop
24 minutes ago （已编辑）
从 tensorflow.keras.datasets 导入 tf 作为 tf
从 tensorflow.keras.preprocessing.image 导入 cifar10

从 tensorflow.keras.models 导入 ImageDataGenerator
从 tensorflow.keras.layers 导入 Sequential、load_model 从 tensorflow.keras.callbacks 导入 Dense， Dropout
from tensorflow.keras.callbacks import ModelCheckpoint， EarlyStopping， ReduceLROnPlateau
from tensorflow.keras.applications import ResNet50
从 sklearn.metrics 导入 f1_score，confusion_matrix
import numpy 作为 np
import matplotlib.pyplot 作为 plt
import seaborn 作为 sns

加载数据集
（x_train， y_train）， （x_test， y_test） = cifar10.load_data（）

归一化数据到0-1范围
x_train，x_test = x_train / 255.0，x_test / 255.0

转换标签为独热编码
y_train = tf.keras.utils.to_categorical（y_train， 10）
y_test = tf.keras.utils.to_categorical（y_test， 10）

数据增强
datagen = ImageDataGenerator（
rotation_range=40，
width_shift_range=0.2，
height_shift_range=0.2，
shear_range=0.2，
zoom_range=0.2，
horizontal_flip=True，
fill_mode='最近'
)

datagen.fit（x_train）

构建ResNet模型
base_model = ResNet50（weights='imagenet'， include_top=False， input_shape=（32， 32， 3））
model = Sequential（[
base_model，
tf.keras.layers.GlobalAveragePooling2D（），
Dense（512， activation='relu'），
Dropout（0.5），
Dense（10， activation='softmax'）
])

冻结ResNet的卷积层
对于 base_model.layers 中的层：
layer.trainable = False

编译模型
优化器 = tf.keras.optimizers.Adam（learning_rate=0.001）
model.compile（optimizer=optimizer，
loss='categorical_crossentropy'，
metrics=['accuracy']）

设置模型检查点、早停回调和学习率调度器
checkpoint = ModelCheckpoint（'best_resnet_cifar10_classifier.h5'，
monitor='val_accuracy'，
save_best_only=True，
mode='max'）

early_stopping = EarlyStopping（monitor='val_accuracy'，
patience=10，
restore_best_weights=True）

reduce_lr = ReduceLROnPlateau（monitor='val_loss'，
factor=0.5，
patience=5，
min_lr=1e-6）

训练模型
历史 = model.fit（datagen.flow（x_train， y_train， batch_size=64），
epochs=100，
validation_data=（x_test， y_test），
callbacks=[checkpoint， early_stopping， reduce_lr]）

可视化训练过程中的损失和准确率变化
plt.figure（figsize=（12， 4））

plt.subplot（1， 2， 1）
plt.plot（history.history['loss']， label='训练损失'）
plt.plot（history.history['val_loss']， label='验证损失'）
plt.xlabel（'纪元'）
plt.ylabel（'损失'）
plt.legend（）
plt.title（'训练和验证损失'）

plt.subplot（1， 2， 2）
plt.plot（history.history['精度']， label='训练精度'）
plt.plot（history.history['val_accuracy']， label='验证精度'）
plt.xlabel（'纪元'）
plt.ylabel（'精度'）
plt.legend（）
plt.title（'训练和验证精度'）

plt.show（）

加载最佳模型
best_model = load_model（'best_resnet_cifar10_classifier.h5'）

计算混淆矩阵和F1分数
y_pred = best_model.predict（x_test）
y_pred_classes = np.argmax（y_pred， axis=1）
y_true = np.argmax（y_test， axis=1）

conf_matrix = confusion_matrix（y_true， y_pred_classes）
f1 = f1_score（y_true， y_pred_classes， average='weighted'）

可视化混淆矩阵
cifar10_classes = ['飞机'， '汽车'， '鸟'， '猫'， '鹿'， '狗'， '青蛙'， '马'， '船'， '卡车']
plt.figure（figsize=（10， 8））
sns.heatmap（conf_matrix， annot=True， fmt='d'， cmap='Blues'， xticklabels=cifar10_classes， yticklabels=cifar10_classes）
plt.xlabel（'预测'）
plt.ylabel（'真'）
plt.title（'混淆矩阵'）
plt.show（）

print（f'F1 分数： {f1}'）
